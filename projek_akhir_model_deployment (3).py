# -*- coding: utf-8 -*-
"""Projek Akhir Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pouRkrAQVPAeU2ctc1cEaLkfl3CX1K64

Nama : Tiara Lailatul Nikmah  
Username : Tiara Laila  
Email : tiaralaila21@gmail.com  
No Telepon : 089635924667  
Asal kota : Juwana, Pati
"""

# install the Kaggle API client
! pip install -q kaggle

# Unggah file kaggle.json
from google.colab import files
files.upload()

!mkdir -p ~/.kaggle 
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# download dataset
!kaggle datasets download -d madisona/translated-animals10

# melakukan unzip pada dataset yang telah di download
import zipfile,os
local_zip = '/content/translated-animals10.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

import os

animal = os.path.join('/tmp/animals10/raw-img/')

# melihat isi direktori
print(os.listdir(animal))

# menghapus beberapa kelas
import shutil

ignore_animal = ['cow', 'squirrel', 'elephant', 'horse', 'butterfly', 'sheep', 'cat']
for x in ignore_animal:
  path = os.path.join(animal, x)
  shutil.rmtree(path)

# melihat isi direktori terbaru
print(os.listdir(animal))

# melihat resolusi gambar anjing
from PIL import Image
path="/tmp/animals10/raw-img/dog/OIF-e2bexWrojgtQnAPPcUfOWQ.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/dog/OIP---_cJbI6Ei26w5bW1urHewHaCf.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/dog/OIP--GlCH31Wry6Uj4tAHTnIUwHaJv.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/dog/OIP--6UY_QQC69uZF4CrwEcfUQHaHa.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/dog/OIP--8oCad9Nr69Ol4YEkvXJFQHaNK.jpeg"
image = Image.open(path)
print(image.size)

# melihat resolusi gambar ayam
from PIL import Image
path="/tmp/animals10/raw-img/chicken/10.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/chicken/100.jpeg"
image2 = Image.open(path)
print(image2.size)
path="/tmp/animals10/raw-img/chicken/1023.jpeg"
image3 = Image.open(path)
print(image3.size)
path="/tmp/animals10/raw-img/chicken/1017.jpeg"
image4 = Image.open(path)
print(image4.size)
path="/tmp/animals10/raw-img/chicken/200.jpeg"
image5 = Image.open(path)
print(image5.size)

# melihat resolusi gambar laba-laba
from PIL import Image
path="/tmp/animals10/raw-img/spider/OIP--1GKxNzkhVbR_eyVRCdp9QHaE6.jpeg"
image = Image.open(path)
print(image.size)
path="/tmp/animals10/raw-img/spider/OIP--5paapdAplutw31OI55uvAHaLI.jpeg"
image2 = Image.open(path)
print(image2.size)
path="/tmp/animals10/raw-img/spider/OIP--CfZ7vJxy1LUVAoT9O1wTAHaE8.jpeg"
image3 = Image.open(path)
print(image3.size)
path="/tmp/animals10/raw-img/spider/OIP--HXOXZ18PdzE1WprWDwq4gEsD6.jpeg"
image4 = Image.open(path)
print(image4.size)
path="/tmp/animals10/raw-img/spider/OIP--KzKnCa70HcbTo88ospaLgAAAA.jpeg"
image5 = Image.open(path)
print(image5.size)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    fill_mode = 'nearest',
    horizontal_flip=True,
    validation_split=0.2)  

test_datagen = ImageDataGenerator(rescale=1./255)

data_latih = train_datagen.flow_from_directory(
    animal,
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical',
    shuffle=False,
    subset='training')

data_val = train_datagen.flow_from_directory(
    animal,
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical',
    shuffle=False,
    subset='validation')

import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications import ResNet152V2

model = tf.keras.models.Sequential([
    ResNet152V2(weights="imagenet", include_top=False, input_tensor=Input(shape=(150, 150, 3))),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])
model.layers[0].trainable = False

model.summary()

from tensorflow.keras.optimizers import SGD
optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
              
model.compile(loss='categorical_crossentropy',
              optimizer=optimizer,
              metrics = ['accuracy'])

# fungsi callback untuk menghentikan epoch apabila akurasi sudah mencapai lebih dari 93%
class toCallback(tf.keras.callbacks.Callback): 
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.93 and logs.get('val_accuracy')>0.93):
      print("Proses Training Berhenti, Tingkat Akurasi Sudah Lebih Dari 93%")
      self.model.stop_training = True

callbacks= toCallback()

# proses training
latih = model.fit(
    data_latih, 
    batch_size=128, 
    steps_per_epoch=20,
    epochs=200, 
    validation_data=data_val, 
    verbose=2, 
    callbacks=[callbacks])

# membuat grafik akurasi data training dan validasi
import matplotlib.pyplot as plt

accuracy = latih.history['accuracy']
val_accuracy = latih.history['val_accuracy']
loss = latih.history['loss']
val_loss = latih.history['val_loss']

epoch_range = range(len(accuracy))

plt.plot(epoch_range, accuracy, label='Mae')
plt.plot(epoch_range, val_accuracy, label='Validation Accuracy')
plt.title('Grafik Akurasi')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(loc=0)
plt.figure()
plt.show()

plt.plot(epoch_range, loss, label='Training loss')
plt.plot(epoch_range, val_loss, label='Validation loss')
plt.title('Grafik loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(loc=0)
plt.figure()
plt.show()

# Konversi model.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)